<?php

/*

Pridat aj OneTimePassword na dalsi request aby sme zaistili ze ak nam dakto uz ukradne SessionID tak nam neukradne aj celu Session
	- ten ukladat do localStorage aby vsetky Taby mali pristup k aktualnemu heslu
	- pridat rychly hash USER_AGENTA ako SESSION_CLIENT aby sme odstranili aj riziko taketo

*/
 
if( !defined('USER_SESSION_TIMEOUT') )	define('USER_SESSION_TIMEOUT', 3600*12);

class Session
{	
	public static $user;
	public static $sessionID;
	private static $started = false;

	public static function init()
	{
		Session::$user = false;
		Session::$sessionID = isset( $_COOKIE['liquid_session_'.PROJECT] ) ? $_COOKIE['liquid_session_'.PROJECT] : null;
	}
	
	private static function start()
	{
		if( !self::$started )
		{
			self::$started = session_start();
		}
	}
	
	private static function stop()
	{
		if( self::$started )
		{
			session_write_close();
			self::$started = false;
		}
	}
	
	public static function set( $key, $value )
	{
		if( !self::$started ){ self::start(); }
		
		$_SESSION[$key] = $value;
		
		return true;
	}
	
	public static function get( $key, $default = null )
	{
		if( !self::$started ){ self::start(); }
		
		if( isset($_SESSION[$key]) )
		{
			return $_SESSION[$key];
		}
		else if( $default != null )
		{
			$_SESSION[$key] = $default;
		}
		
		return $default;
	}
	
	public static function getUser( $key = null, $default = null )
	{
		if( Session::$user !== false )
		{
			if( $key != null )
			{
				return Session::$user[$key];
			}
			
			return Session::$user;
		}
		
		Session::$user = null;
	
		if( Session::$sessionID !== null )
		{		
			$user = Database::query( 'SELECT * FROM user_sessions LEFT JOIN users ON user_sessions.USER_ID = users.USER_ID WHERE user_sessions.SESSION_ID = "'.str_replace('"','\\"',Session::$sessionID).'" AND user_sessions.SESSION_IP ="'.$_SERVER['REMOTE_ADDR'].'"' );
			
			if( !empty( $user ) )
			{
				Session::$user = $user[0];
				
				if( !isset($_COOKIE['liquid_session_'.PROJECT.'_OTP']) || ( ( $_COOKIE['liquid_session_'.PROJECT.'_OTP'] != Session::$user['SESSION_OTP'] ) && ( $_COOKIE['liquid_session_'.PROJECT.'_OTP'] != Session::$user['SESSION_LAST_OTP'] ) ) ) // Pridat este cas max 15 sekund na stare OTP
				{
					Session::$user = null;
					
					setcookie( 'liquid_session_'.PROJECT, '', time() - 604800, '/', DOMAIN, 0, 1);
					setcookie( 'liquid_session_'.PROJECT.'_OTP', '', time() - 604800, '/', DOMAIN, 0, 1);
				}
				else if( date('Y-m-d H:i:s',time() - 60) > Session::$user['SESSION_TIME'] )
				{
					$sessionOTP = Session::generateSessionID();
					
					Database::query( 'UPDATE user_sessions SET SESSION_LAST_OTP = SESSION_OTP, SESSION_OTP = "'.$sessionOTP.'" WHERE SESSION_ID = "'.Session::$user['SESSION_ID'].'"' );
					
					setcookie( 'liquid_session_'.PROJECT, Session::$user['SESSION_ID'], time() + USER_SESSION_TIMEOUT, '/', DOMAIN, 0, 1);
					setcookie( 'liquid_session_'.PROJECT.'_OTP', $sessionOTP, time() + USER_SESSION_TIMEOUT, '/', DOMAIN, 0, 1);
				}
			}
			else
			{
				Session::$user = null;
			}
		}
		
		if( $key == null )
		{
			return Session::$user;
		}
		else if( isset(Session::$user[$key]) )
		{
			return Session::$user[$key];
		}
		
		return $default;
	}
	
	public static function login( $login, $password )
	{		
		if( ( Session::$sessionID !== null ) && ( Session::getUser() !== null ) )
		{
			Database::query( 'DELETE FROM user_sessions WHERE USER_ID = '.Session::$user['USER_ID'].' AND SESSION_ID = "'.str_replace('"','\\"',Session::$sessionID).'"' );
			Session::$sessionID = null;
		}
	
		$user = Database::query( 'SELECT * FROM users WHERE USER_LOGIN = "'.str_replace('"','\\"',$login).'" AND USER_PASSWORD = "'.str_replace('"','\\"', self::encryptPassword($password)).'"' );
		
		if( !empty( $user ) )
		{
			Session::$user = $user[0];
			
			$sessionID = Session::generateSessionID();
			$sessionOTP = Session::generateSessionID();
			
			Database::query( 'INSERT INTO user_sessions (SESSION_ID,USER_ID,SESSION_IP,SESSION_DEVICE,SESSION_OTP,SESSION_LAST_OTP) VALUES ("'.$sessionID.'",'.Session::$user['USER_ID'].',"'.$_SERVER['REMOTE_ADDR'].'","browser","'.$sessionOTP.'","'.$sessionOTP.'")' );
			
			setcookie( 'liquid_session_'.PROJECT, $sessionID, time() + USER_SESSION_TIMEOUT, '/', DOMAIN, 0, 1);
			setcookie( 'liquid_session_'.PROJECT.'_OTP', $sessionOTP, time() + USER_SESSION_TIMEOUT, '/', DOMAIN, 0, 1);
			
			return true;
		}
		else
		{
			Session::$user = null;
		
			return false;
		}
	}
	
	public static function apiLogin($userID, $ip)
	{
		if( ( Session::$sessionID !== null ) && ( Session::getUser() !== null ) )
		{
			Database::query( 'DELETE FROM user_sessions WHERE USER_ID = '.Session::$user['USER_ID'].' AND SESSION_ID = "'.str_replace('"','\\"',Session::$sessionID).'"' );
			Session::$sessionID = null;
		}
		
		$user = Database::row( 'SELECT * FROM users WHERE USER_ID = :userID', array('userID' => $userID) );
		
		if( !empty( $user ) )
		{
			Session::$user = $user;
			
			$sessionID = Session::generateSessionID();
			$sessionOTP = Session::generateSessionID();
			
			Database::query( 'INSERT INTO user_sessions (SESSION_ID,USER_ID,SESSION_IP,SESSION_DEVICE,SESSION_OTP,SESSION_LAST_OTP) VALUES ("'.$sessionID.'",'.Session::$user['USER_ID'].',"'.$ip.'","browser","'.$sessionOTP.'","'.$sessionOTP.'")' );
			
			setcookie( 'liquid_session_'.PROJECT, $sessionID, time() + USER_SESSION_TIMEOUT, '/', DOMAIN, 0, 1);
			setcookie( 'liquid_session_'.PROJECT.'_OTP', $sessionOTP, time() + USER_SESSION_TIMEOUT, '/', DOMAIN, 0, 1);
			
			return true;
		}
		else
		{
			Session::$user = null;
		
			return false;
		}
	}
	
	public static function logout( $sessionID = null ) /* sessionID = null | id | ALL */
	{	
		if( Session::getUser() !== null )
		{			
			if( $sessionID === null )
			{
				Database::query( 'DELETE FROM user_sessions WHERE USER_ID = '.Session::$user['USER_ID'].' AND SESSION_ID = "'.str_replace('"','\\"',Session::$sessionID).'"' );
				Session::$sessionID = null;
			}
			else if( $sessionID === 'ALL' )
			{
				Database::query( 'DELETE FROM user_sessions WHERE USER_ID = '.Session::$user['USER_ID'] );
				Session::$sessionID = null;
			}
			else
			{
				Database::query( 'DELETE FROM user_sessions WHERE USER_ID = '.Session::$user['USER_ID'].' AND SESSION_ID = "'.str_replace('"','\\"',$sessionID).'"' );
			}
		}
		setcookie( 'liquid_session_'.PROJECT, '', time() - 604800, '/', DOMAIN, 0, 1);
		
		return true;
	}
	
	public static function register( $login, $password, $name = '' )
	{		
		if( empty($password) ) return false;
	
		Database::query( 'INSERT INTO users (USER_LOGIN, USER_NAME, USER_PASSWORD) VALUES (:login, :name, :password)', array( 'login' => $login, 'name' => $name, 'password' => self::encryptPassword($password) ), $status );
		
		dump($status);
		
		if( $status['ROWS'] == -1 ) return false;
		
		return self::login( $login, $password );
	}
	
	private static function generateSessionID()
	{
	    $sessionID = ''; $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'; $charactersCnt = strlen($characters);
	        
	    for( $i = 0; $i < 10; $i++ )	$sessionID .= substr($characters, mt_rand(0, $charactersCnt-1), 1);
	    $sessionID .= date("YmdHis");
	    for( $i = 0; $i < 10; $i++ )	$sessionID .= substr($characters, mt_rand(0, $charactersCnt-1), 1);
	    
	    return str_shuffle($sessionID);
	}
	
	public static function encryptPassword( $password )
	{
		return Bcrypt::hash('!*0l53M#'.$password.'&50LT4M$');
	}
}

Session::init();


class Bcrypt
{
	public static function hash( $input, $rounds = 12 )
	{
		$alphabet = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'; $alphabetCnt = strlen($alphabet);
	
		$salt = sha1($input);
		for( $i = 0; $i < $rounds; $i++ )$salt = base64_encode(substr(strrev(sha1($salt)),(7+11*$i)%10,20+(3+2*$i)%10));
		$salt = sprintf('$2a$%02d$', $rounds) . substr(strrev(sha1($salt)),0,22);
		
		$hash = crypt($input, $salt);
		
		$checksumHash 	= 0; for( $i = 0, $cnt = strlen($hash);  $i < $cnt; $i++ ) 	$checksumHash  += ord($hash[$i]);
		$checksumSalt 	= 0; for( $i = 0, $cnt = strlen($salt);  $i < $cnt; $i++ ) 	$checksumSalt  += ord($salt[$i]);
		$checksumInput 	= 0; for( $i = 0, $cnt = strlen($input); $i < $cnt; $i++ ) 	$checksumInput += ord($input[$i]);
		$hash = str_replace('$',$alphabet[$checksumHash*$checksumSalt%$alphabetCnt],$hash);
		$hash = str_replace('/',$alphabet[$checksumHash*$checksumInput%$alphabetCnt],$hash);
		$hash = str_replace('.',$alphabet[$checksumInput*$checksumSalt%$alphabetCnt],$hash);
		
		for($hash = strrev($hash), $f0 = 1, $f1 = 1, $f = 1, $i = 0, $cnt = strlen($hash); $i < $cnt; $i++)
		{
			$pos = ($checksumHash+$checksumSalt+$checksumInput*$f)%$cnt; $f0 = $f1; $f1 = $f; $f = ($f0 + $f1) % 87654321;	
			$char = $hash[$i]; $hash[$i] = $hash[$pos]; $hash[$pos] = $char;
		}
		
		return $hash;
    }
}